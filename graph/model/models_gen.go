// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	srvcustomer "quorum-api/services/customer"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

type BaseError interface {
	IsBaseError()
	GetMessage() string
	GetPath() []string
}

type CreatePostError interface {
	IsCreatePostError()
}

type GetLoginLinkError interface {
	IsGetLoginLinkError()
}

type SignUpError interface {
	IsSignUpError()
}

type VerifyCustomerTokenError interface {
	IsVerifyCustomerTokenError()
}

type CreatePostInput struct {
	ID          uuid.UUID                `json:"id"`
	DesignPhase *DesignPhase             `json:"designPhase,omitempty"`
	Context     *string                  `json:"context,omitempty"`
	Category    *PostCategory            `json:"category,omitempty"`
	LiveAt      *time.Time               `json:"liveAt,omitempty"`
	ClosesAt    *time.Time               `json:"closesAt,omitempty"`
	Tags        []string                 `json:"tags,omitempty"`
	Options     []*CreatePostOptionInput `json:"options"`
}

type CreatePostOptionInput struct {
	Position int            `json:"position"`
	File     graphql.Upload `json:"file"`
}

type CreatePostPayload struct {
	Post   *Post             `json:"post,omitempty"`
	Errors []CreatePostError `json:"errors"`
}

type CustomerNotFoundError struct {
	Message string   `json:"message"`
	Path    []string `json:"path,omitempty"`
}

func (CustomerNotFoundError) IsBaseError()            {}
func (this CustomerNotFoundError) GetMessage() string { return this.Message }
func (this CustomerNotFoundError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (CustomerNotFoundError) IsGetLoginLinkError() {}

type GetLoginLinkInput struct {
	Email    string `json:"email"`
	ReturnTo string `json:"returnTo"`
}

type GetLoginLinkPayload struct {
	Errors []GetLoginLinkError `json:"errors"`
}

type InvalidEmailError struct {
	Message string   `json:"message"`
	Path    []string `json:"path,omitempty"`
}

func (InvalidEmailError) IsBaseError()            {}
func (this InvalidEmailError) GetMessage() string { return this.Message }
func (this InvalidEmailError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (InvalidEmailError) IsSignUpError() {}

func (InvalidEmailError) IsGetLoginLinkError() {}

type InvalidReturnToError struct {
	Message string   `json:"message"`
	Path    []string `json:"path,omitempty"`
}

func (InvalidReturnToError) IsBaseError()            {}
func (this InvalidReturnToError) GetMessage() string { return this.Message }
func (this InvalidReturnToError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (InvalidReturnToError) IsSignUpError() {}

func (InvalidReturnToError) IsGetLoginLinkError() {}

type LinkExpiredError struct {
	Message string   `json:"message"`
	Path    []string `json:"path,omitempty"`
}

func (LinkExpiredError) IsBaseError()            {}
func (this LinkExpiredError) GetMessage() string { return this.Message }
func (this LinkExpiredError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (LinkExpiredError) IsVerifyCustomerTokenError() {}

type Mutation struct {
}

type Post struct {
	ID          uuid.UUID             `json:"id"`
	DesignPhase *DesignPhase          `json:"designPhase,omitempty"`
	Context     *string               `json:"context,omitempty"`
	Category    *PostCategory         `json:"category,omitempty"`
	LiveAt      *time.Time            `json:"liveAt,omitempty"`
	ClosesAt    *time.Time            `json:"closesAt,omitempty"`
	Author      *srvcustomer.Customer `json:"author,omitempty"`
	Tags        []string              `json:"tags,omitempty"`
	Options     []*PostOption         `json:"options,omitempty"`
	Votes       []*PostVote           `json:"votes,omitempty"`
}

type PostOption struct {
	ID       uuid.UUID `json:"id"`
	URL      *string   `json:"url,omitempty"`
	Position int       `json:"position"`
}

type PostVote struct {
	ID     uuid.UUID             `json:"id"`
	Post   *Post                 `json:"post,omitempty"`
	Voter  *srvcustomer.Customer `json:"voter,omitempty"`
	Reason *string               `json:"reason,omitempty"`
}

type Query struct {
}

type SignUpInput struct {
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	Profession string `json:"profession"`
	ReturnTo   string `json:"returnTo"`
}

type SignUpPayload struct {
	Errors []SignUpError `json:"errors"`
}

type TooManyOptionsError struct {
	Message    string   `json:"message"`
	Path       []string `json:"path,omitempty"`
	MaxOptions int      `json:"maxOptions"`
}

func (TooManyOptionsError) IsBaseError()            {}
func (this TooManyOptionsError) GetMessage() string { return this.Message }
func (this TooManyOptionsError) GetPath() []string {
	if this.Path == nil {
		return nil
	}
	interfaceSlice := make([]string, 0, len(this.Path))
	for _, concrete := range this.Path {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}

func (TooManyOptionsError) IsCreatePostError() {}

type VerifyCustomerTokenInput struct {
	Token string `json:"token"`
}

type VerifyCustomerTokenPayload struct {
	Customer *srvcustomer.Customer      `json:"customer,omitempty"`
	NewToken *string                    `json:"newToken,omitempty"`
	Errors   []VerifyCustomerTokenError `json:"errors"`
}

type DesignPhase string

const (
	DesignPhaseWireframe DesignPhase = "WIREFRAME"
	DesignPhaseLoFi      DesignPhase = "LO_FI"
	DesignPhaseHiFi      DesignPhase = "HI_FI"
)

var AllDesignPhase = []DesignPhase{
	DesignPhaseWireframe,
	DesignPhaseLoFi,
	DesignPhaseHiFi,
}

func (e DesignPhase) IsValid() bool {
	switch e {
	case DesignPhaseWireframe, DesignPhaseLoFi, DesignPhaseHiFi:
		return true
	}
	return false
}

func (e DesignPhase) String() string {
	return string(e)
}

func (e *DesignPhase) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DesignPhase(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DesignPhase", str)
	}
	return nil
}

func (e DesignPhase) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostCategory string

const (
	PostCategoryProductDesign PostCategory = "PRODUCT_DESIGN"
)

var AllPostCategory = []PostCategory{
	PostCategoryProductDesign,
}

func (e PostCategory) IsValid() bool {
	switch e {
	case PostCategoryProductDesign:
		return true
	}
	return false
}

func (e PostCategory) String() string {
	return string(e)
}

func (e *PostCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostCategory", str)
	}
	return nil
}

func (e PostCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

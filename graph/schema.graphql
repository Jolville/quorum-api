scalar UUID

scalar Time

scalar Upload

type Customer {
  id: UUID!
  firstName: String
  lastName: String
  email: String!
  profession: String
}

type Query {
  customer: Customer
  post(id: UUID!): Post
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  profession: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

interface BaseError {
  # A description of the error
  message: String!
  # A path to the input value that caused the error
  path: [String!]
}

type InvalidEmailError implements BaseError {
  message: String!
  path: [String!]
}

type InvalidReturnToError implements BaseError {
  message: String!
  path: [String!]
}

union SignUpError = InvalidEmailError | InvalidReturnToError

type SignUpPayload {
  errors: [SignUpError!]!
}

input GetLoginLinkInput {
  email: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

type CustomerNotFoundError implements BaseError {
  message: String!
  path: [String!]
}

union GetLoginLinkError =
    InvalidEmailError
  | CustomerNotFoundError
  | InvalidReturnToError

type GetLoginLinkPayload {
  errors: [GetLoginLinkError!]!
}

input VerifyCustomerTokenInput {
  token: String!
}

type LinkExpiredError implements BaseError {
  message: String!
  path: [String!]
}

union VerifyCustomerTokenError = LinkExpiredError

type VerifyCustomerTokenPayload {
  customer: Customer
  newToken: ID
  errors: [VerifyCustomerTokenError!]!
}

type Mutation {
  signUp(input: SignUpInput!): SignUpPayload!
  getLoginLink(input: GetLoginLinkInput!): GetLoginLinkPayload!
  verifyCustomerToken(
    input: VerifyCustomerTokenInput!
  ): VerifyCustomerTokenPayload!
  createPost(input: CreatePostInput!): CreatePostPayload!
}

type TooManyOptionsError implements BaseError {
  message: String!
  path: [String!]
}

type TooFewOptionsError implements BaseError {
  message: String!
  path: [String!]
}

type ErrPostNotOwned implements BaseError {
  message: String!
  path: [String!]
}

type AuthorUnknownError implements BaseError {
  message: String!
  path: [String!]
}

type LiveAtAlreadyPassedError implements BaseError {
  message: String!
  path: [String!]
}

type NotOpenForLongEnoughError implements BaseError {
  message: String!
  path: [String!]
}

union CreatePostError =
    TooManyOptionsError
  | TooFewOptionsError
  | ErrPostNotOwned
  | AuthorUnknownError
  | LiveAtAlreadyPassedError
  | NotOpenForLongEnoughError

type CreatePostPayload {
  post: Post
  errors: [CreatePostError!]!
}

enum DesignPhase {
  WIREFRAME
  LO_FI
  HI_FI
}

enum PostCategory {
  PRODUCT_DESIGN
}

type Post {
  id: UUID!
  designPhase: DesignPhase
  context: String
  category: PostCategory
  liveAt: Time
  closesAt: Time
  author: Customer
  tags: [String!]
  # Options are ordered by position
  options: [PostOption!]
  votes: [PostVote!]
}

type PostOption {
  id: UUID!
  url: String
  position: Int!
}

type PostVote {
  id: UUID!
  post: Post
  voter: Customer
  reason: String
}

input CreatePostInput {
  id: UUID!
  designPhase: DesignPhase
  context: String
  category: PostCategory
  liveAt: Time
  closesAt: Time
  tags: [String!]
  options: [CreatePostOptionInput!]!
}

input CreatePostOptionInput {
  position: Int!
  file: Upload!
}

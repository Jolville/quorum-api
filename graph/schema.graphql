scalar UUID

scalar Time

type Customer {
  id: UUID!
  firstName: String!
  lastName: String!
  email: String!
  profession: String!
}

type Query {
  customer: Customer
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  profession: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

interface BaseError {
  # A description of the error
  message: String!
  # A path to the input value that caused the error
  path: [String!]
}

type EmailTakenError implements BaseError {
  message: String!
  path: [String!]
}

type InvalidEmailError implements BaseError {
  message: String!
  path: [String!]
}

type InvalidReturnToError implements BaseError {
  message: String!
  path: [String!]
}

union SignUpError = EmailTakenError | InvalidEmailError | InvalidReturnToError

type SignUpPayload {
  errors: [SignUpError!]!
}

input GetLoginLinkInput {
  email: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

type CustomerNotFoundError implements BaseError {
  message: String!
  path: [String!]
}

union GetLoginLinkError =
    InvalidEmailError
  | CustomerNotFoundError
  | InvalidReturnToError

type GetLoginLinkPayload {
  errors: [GetLoginLinkError!]!
}

input VerifyCustomerTokenInput {
  token: String!
}

type LinkExpiredError implements BaseError {
  message: String!
  path: [String!]
}

union VerifyCustomerTokenError = LinkExpiredError

type VerifyCustomerTokenPayload {
  customer: Customer
  newToken: ID
  errors: [VerifyCustomerTokenError!]!
}

type Mutation {
  signUp(input: SignUpInput!): SignUpPayload!
  getLoginLink(input: GetLoginLinkInput!): GetLoginLinkPayload!
  verifyCustomerToken(
    input: VerifyCustomerTokenInput!
  ): VerifyCustomerTokenPayload!
}

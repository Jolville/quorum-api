scalar UUID

scalar Time

type User {
  id: UUID!
  firstName: String!
  lastName: String!
  email: String!
  profression: String!
}

type Query {
  user: User
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  profession: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

interface BaseError {
  # A description of the error
  message: String!
  # A path to the input value that caused the error
  path: [String!]
}

type EmailTakenError implements BaseError {
  message: String!
  path: [String!]
}

type InvalidEmailError implements BaseError {
  message: String!
  path: [String!]
}

type InvalidReturnToError implements BaseError {
  message: String!
  path: [String!]
}

union SignUpError = EmailTakenError | InvalidEmailError | InvalidReturnToError

type SignUpPayload {
  errors: [SignUpError!]!
}

input GetLoginLinkInput {
  email: String!
  # Relative url, e.g. /post/123
  returnTo: String!
}

type UserNotFoundError implements BaseError {
  message: String!
  path: [String!]
}

union GetLoginLinkError =
    InvalidEmailError
  | UserNotFoundError
  | InvalidReturnToError

type GetLoginLinkPayload {
  errors: [GetLoginLinkError!]!
}

input VerifyUserTokenInput {
  token: String!
}

type LinkExpiredError implements BaseError {
  message: String!
  path: [String!]
}

union VerifyUserTokenError = LinkExpiredError

type VerifyUserTokenPayload {
  user: User
  newToken: ID
  errors: [VerifyUserTokenError!]!
}

type Mutation {
  signUp(input: SignUpInput!): SignUpPayload!
  getLoginLink(input: GetLoginLinkInput!): GetLoginLinkPayload!
  verifyUserToken(input: VerifyUserTokenInput!): VerifyUserTokenPayload!
}
